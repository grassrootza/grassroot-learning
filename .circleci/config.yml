version: 2

step-library:
  - &fetch-aws-cli
      run:
        name: Download pip and install AWS CLI
        command: |
          pip install awscli --upgrade --user

jobs:
  deps:
    docker:
      - image: circleci/python:3.6.1
    steps:
      - checkout
      - restore_cache:
          keys: 
            - v1-dependencies-{{ checksum "requirements.txt" }}
            - v1-dependencies-
      - run:
          name: Install local pip dependencies & fetch spacy
          command: |
            python3 -m venv venv
            . venv/bin/activate
            pip install -r requirements.txt
            python -m spacy download en_core_web_md && python -m spacy link en_core_web_md en
      - save_cache:
          key: v1-dependencies-{{ checksum "requirements.txt" }}
          paths:
            - "venv"
  
  train:
    docker:
      - image: circleci/python:3.6.1
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "requirements.txt" }}
      - run:
          name: Train NLU 
          command: |
            . venv/bin/activate
            make train-nlu 
      - run:
          name: Train core
          command: |
            . venv/bin/activate
            make train-core
      - save_cache:
          key: v1-models-{{ .Branch }}-{{ .Revision }}
          paths:
            - nlu-opening
            - core-knowledge
            - core-services
            - core-platform

  containerize:
    docker:
      - image: circleci/python:3.6.1
    steps:
      - setup_remote_docker
      - restore_cache:
          keys:
            - v1-models-{{ .Branch }}-{{ .Revision }}
      - run:
          name: Build Docker image
          command: |
            export VERSION=${CIRCLE_BRANCH}-${CIRCLE_SHA1}
            docker build -f Dockerfile -t grassroot-rasa:${VERSION} .
      - *fetch-aws-cli
      - run:
          name: Tag and upload image to ECR
          command: |
            export PATH=~/.local/bin:$PATH
            eval $(aws ecr get-login --no-include-email --region eu-west-1)
            export VERSION=${CIRCLE_BRANCH}-${CIRCLE_SHA1}
            docker tag grassroot-rasa:${VERSION} ${ECR_URL}/grassroot-rasa:${VERSION}
            docker push ${ECR_URL}/grassroot-rasa:${VERSION}

  deploy:
    docker:
      - image: circleci/python:3.6.1
    steps:
      - checkout
      - run: 
          name: deploy
          command: |
            sudo -H pip install awscli
            sudo -H pip install awsebcli
            echo "Deploying version $CIRCLE_BRANCH-$CIRCLE-SHA1"
            sed -i "s/<TAG>/$CIRCLE_BRANCH-$CIRCLE_SHA1/" ./Dockerrun.aws.json
            eb deploy learning-staging
            
  test:
    docker:
      - image: circleci/python:3.6.1
    steps:
      - checkout
      - run: 
          command: |
            sudo -H pip install awscli
            sudo -H pip install awsebcli

  selenium_test:
    docker:
      - image: circleci/python:3.6.2-stretch-browsers
        environment:
          FLASK_CONFIG: testing
          TEST_DATABASE_URL: postgresql://ubuntu@localhost/circle_test?sslmode=disable
      - image: circleci/postgres:9.6.5-alpine-ram
        environment:
          POSTGRES_USER: ubuntu
          POSTGRES_DB: circle_test
          POSTGRES_PASSWORD: ""
    steps:
      - checkout
      - run: mkdir test-reports
      - run:
          name: Download Selenium
          command: |
            curl -O http://selenium-release.storage.googleapis.com/3.5/selenium-server-standalone-3.5.3.jar
      - run:
          name: Start Selenium
          command: |
            java -jar selenium-server-standalone-3.5.3.jar -log test-reports/selenium.log
          background: true
      - restore_cache:
          key: deps1-{{ .Branch }}-{{ checksum "requirements/dev.txt" }}
      - run:
          name: Install Python deps in a venv
          command: |
            python3 -m venv venv
            . venv/bin/activate
            pip install -r requirements/dev.txt
      - save_cache:
          key: deps1-{{ .Branch }}-{{ checksum "requirements/dev.txt" }}
          paths:
            - "venv"
      - run:
          command: |
            . venv/bin/activate
            python selenium_tests.py
      - store_artifacts:
          path: test-reports/
          destination: tr1
      - store_test_results:
          path: test-reports/

workflows:
  version: 2
  build_and_test:
    jobs:
      - deps:
      - train:
          requires:
            - deps
          filters:
            branches:
              only: wip-circle-revision
      - containerize:
          requires:
            - train
      # - selenium_test:
      #     requires:
      #       - build
      - deploy:
          requires:
            - build
          filters:
            branches:
              only: master
